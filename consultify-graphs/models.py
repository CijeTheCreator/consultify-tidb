from pydantic import BaseModel, Field
from datetime import datetime
from pydantic import BaseModel, Field
from typing import Literal, Optional, List
from datetime import datetime
from enum import Enum

class Prescription(BaseModel):
    id: Optional[str] = Field(default=None, description="Unique identifier for the prescription")
    drug_name: Optional[str] = Field(default=None, description="Name of the prescribed drug")
    frequency: Optional[str] = Field(default=None, description="Frequency of drug administration")
    start_timestamp: Optional[datetime] = Field(default=None, description="When the prescription should start")
    end_timestamp: Optional[datetime] = Field(default=None, description="When the prescription should end")
    patient_id: Optional[str] = Field(default=None, description="ID of the patient receiving the prescription")
    consultation_id: Optional[str] = Field(default=None, description="ID of the consultation this prescription belongs to")
    created_at: Optional[datetime] = Field(default_factory=datetime.now, description="When the prescription was created")
    updated_at: Optional[datetime] = Field(default_factory=datetime.now, description="When the prescription was last updated")


class ConsultationState(str, Enum):
    CLERKING = "CLERKING"
    CONSULTING = "CONSULTING"


class Consultation(BaseModel):
    id: Optional[str] = Field(default=None, description="Unique identifier for the consultation")
    state: Optional[ConsultationState] = Field(default=None, description="Current state of the consultation")
    prescription_assistance: Optional[str] = Field(default=None, description="Prescription assistance information")
    prescription_assistance_state: Optional[str] = Field(default="idle", description="State of prescription assistance")
    patient_id: Optional[str] = Field(default=None, description="ID of the patient for this consultation")
    clerk_id: Optional[str] = Field(default=None, description="ID of the clerk/triage agent for this consultation")
    doctor_id: Optional[str] = Field(default=None, description="ID of the doctor assigned to this consultation")
    messages: Optional[List["Message"]] = Field(default=[], description="List of messages in this consultation")
    prescriptions: Optional[List["Prescription"]] = Field(default=[], description="List of prescriptions for this consultation")
    created_at: Optional[datetime] = Field(default_factory=datetime.now, description="When the consultation was created")
    updated_at: Optional[datetime] = Field(default_factory=datetime.now, description="When the consultation was last updated")


class Message(BaseModel):
    id: Optional[str] = Field(default=None, description="Unique identifier for the message")
    translated_content: Optional[str] = Field(default=None, description="Translated message content")
    translated_language: Optional[str] = Field(default=None, description="Language the message was translated to")
    original_language: Optional[str] = Field(default=None, description="Original language of the message")
    original_content: Optional[str] = Field(default=None, description="Original message content")
    llm_language: Optional[str] = Field(default="en", description="LLM processing language")
    llm_content: Optional[str] = Field(default="en", description="LLM content language")
    state: Optional[str] = Field(default=None, description="Processing state of the message")
    sender_id: Optional[str] = Field(default=None, description="ID of the user who sent the message")
    consultation_id: Optional[str] = Field(default=None, description="ID of the consultation this message belongs to")
    created_at: Optional[datetime] = Field(default_factory=datetime.now, description="When the message was created")
    updated_at: Optional[datetime] = Field(default_factory=datetime.now, description="When the message was last updated")

class QueryGeneration(BaseModel):
    """Model for generating search queries for medical lookup."""
    query: Optional[str] = Field(default=None, description="Generated query optimized for searching medical textbook")

class AgentState(BaseModel):
    conversation: Optional[list[Message]] = Field(default=[], description="Conversation so far")
    last_inserted_message_by_user: Optional[Message] = Field(default=None, description="Conversation so far")
    query: Optional[str] = Field(default=None, description="Query generated by generate query node")
    refined_query: Optional[str] = Field(default=None, description="Query generated by rewrite query node")
    context_retrieved: Optional[str] = Field(default=None, description="Context retrieved from tidb vector store")
    consultation: Optional[Consultation] = Field(default=None, description="Metadata of the consultation")
    next_message_to_append: Optional[Message] = Field(default=None, description="Response from graph, the next message to append")



class GradeDocuments(BaseModel):
    """Grade documents using a binary score for relevance check."""
    binary_score: Literal["YES", "NO"] = Field(
        description="Relevance score: 'YES' if relevant, or 'NO' if not relevant"
    )



class RewrittenQuestion(BaseModel):
    """Pydantic model for the rewritten question response."""
    improved_question: str = Field(
        description="The semantically improved and clarified version of the original question"
    )
