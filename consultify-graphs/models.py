from pydantic import BaseModel, Field
from datetime import datetime
from pydantic import BaseModel, Field
from typing import Optional, List
from datetime import datetime
from enum import Enum

class Prescription(BaseModel):
    id: str = Field(description="Unique identifier for the prescription")
    drug_name: str = Field(description="Name of the prescribed drug")
    frequency: str = Field(description="Frequency of drug administration")
    start_timestamp: datetime = Field(description="When the prescription should start")
    end_timestamp: datetime = Field(description="When the prescription should end")
    patient_id: str = Field(description="ID of the patient receiving the prescription")
    consultation_id: str = Field(description="ID of the consultation this prescription belongs to")
    created_at: datetime = Field(default_factory=datetime.now, description="When the prescription was created")
    updated_at: datetime = Field(default_factory=datetime.now, description="When the prescription was last updated")


class ConsultationState(str, Enum):
    CLERKING = "CLERKING"
    CONSULTING = "CONSULTING"


class Consultation(BaseModel):
    id: str = Field(description="Unique identifier for the consultation")
    state: ConsultationState = Field(description="Current state of the consultation")
    prescription_assistance: Optional[str] = Field(None, description="Prescription assistance information")
    prescription_assistance_state: str = Field(default="idle", description="State of prescription assistance")
    patient_id: str = Field(description="ID of the patient for this consultation")
    doctor_id: Optional[str] = Field(None, description="ID of the doctor assigned to this consultation")
    messages: List["Message"] = Field(default=[], description="List of messages in this consultation")
    prescriptions: List["Prescription"] = Field(default=[], description="List of prescriptions for this consultation")
    created_at: datetime = Field(default_factory=datetime.now, description="When the consultation was created")
    updated_at: datetime = Field(default_factory=datetime.now, description="When the consultation was last updated")


class Message(BaseModel):
    id: str = Field(description="Unique identifier for the message")
    translated_content: Optional[str] = Field(None, description="Translated message content")
    translated_language: Optional[str] = Field(None, description="Language the message was translated to")
    original_language: Optional[str] = Field(None, description="Original language of the message")
    original_content: Optional[str] = Field(None, description="Original message content")
    llm_language: str = Field(default="en", description="LLM processing language")
    llm_content: str = Field(default="en", description="LLM content language")
    state: Optional[str] = Field(None, description="Processing state of the message")
    sender_id: str = Field(description="ID of the user who sent the message")
    consultation_id: str = Field(description="ID of the consultation this message belongs to")
    created_at: datetime = Field(default_factory=datetime.now, description="When the message was created")
    updated_at: datetime = Field(default_factory=datetime.now, description="When the message was last updated")

class AgentState(BaseModel):
    conversation: list[Message] = Field(description="Conversation so far")
    last_inserted_message_by_user: Message = Field(description="Conversation so far")
    query: str = Field(description="Query generated by generate query node")
    refined_query: str = Field(description="Query generated by rewrite query node")
    context_retrieved: str = Field(description="Context retrieved from tidb vector store")
    consultation: Consultation = Field(description="Metadata of the consultation")
    next_message_to_append: Message = Field(description="Response from graph, the next message to append")



